class Nodo:
    def _init_(self):
        self.valor = self.insertarValor()
        self.hijos = []

class Arbol:
    def _init_(self, valorRaiz):
        self.raiz = Nodo(valorRaiz) #Esto permite que el valor del nodo se None ¿No?

    def insertarValor(self):
        return

    def agregarNodo(self, valor, padre):
        if padre is None:
            if self.raiz is None:
                nuevo_nodo = Nodo(valor)
                self.raiz = nuevo_nodo
            else:
                print("Debes tener una raíz para el árbol.")
        else:
            padre = self.buscarNodo(self.raiz, padre)
            padre.hijos.append(Arbol(valor))
            
    def buscarNodo(self, nodo_actual, valor_buscado):
        nodo_actual = Nodo()
        if nodo_actual.valor == valor_buscado:
            return nodo_actual
        for hijo in nodo_actual.hijos:
            valor_buscado = self.buscarNodo(hijo, valor_buscado)
            if (valor_buscado != None):
                return valor_buscado
        return None   
            
                   
    def imprimirArbol(self, nodo=None):
        if nodo is None:
            nodo = self.raiz
            print(nodo.valor)
        for hijo in nodo.hijos:
            self.imprimirArbol(hijo)

    def altura(self, nodo=None):
        if nodo is None:
            nodo = self.raiz
        
        if len(nodo.hijos) == 0:
            return 1
        else:
            altura_hijos = []
            for hijo in nodo.hijos:
                altura_hijos.append(self.altura(hijo))
            return 1 + max(altura_hijos)
        

    def peso(self, nodo = None):
        if nodo is None:
            nodo = self.raiz
        totalNodos = 1
        for hijo in nodo.hijos:
            totalNodos += self.peso(hijo)
        return totalNodos

            

